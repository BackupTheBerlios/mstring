/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * (c) Copyright 2006,2007,2008 MString Core Team <http://mstring.berlios.de>
 * (c) Copyright 2005,2008 Tirra <tirra.newly@gmail.com>
 *
 * eza/generic_api/main.c: main routine, this functions called after bootstrap
 *                          initialization made
 *
 */

#include <mm/page.h>
#include <eza/arch/types.h>
#include <eza/arch/mm_types.h>
#include <eza/arch/page.h>
#include <eza/arch/cpu.h>
#include <eza/kconsole.h>
#include <eza/context.h>
#include <eza/mm_init.h>
#include <eza/kprintf.h>
#include <profile.h>
#include <align.h>
#include <misc.h>
#include <eza/smp.h>
#include <eza/interrupt.h>
#include <eza/scheduler.h>
#include <mlibc/string.h>

#define CONFIG_STACK_SIZE  ((1 << 0) * PAGE_SIZE)

init_t init={ /* initially created for userspace task, requered for servers loading */
   .c=0
};

/* current context safe */
context_t crsc;

void main_routine(void) /* this function called from boostrap assembler code */
{
  kconsole_t *kcons = default_console();
  char tmp[256];
  int i;
  
  kcons->enable(); /* init kconsole - the base print system */
  kprintf("[LW] Bootstrap initied.\n");
  kprintf("[LW] Low level console initied.\n[MSG] Continue higher initialization...\n");
  /* init memory manager stuff - stage 0 */
  arch_mm_stage0_init();
  kprintf("[MM] Stage0 memory manager initied.\n");
  kprintf("Let's test some kprintf sweet stuff:\n");
  kprintf("* I can print numbers:\n");
  kprintf("\tDec: %d, %d\n", 0xff, -0xff);
  kprintf("\tOct: %#o\n", 0xff);
  kprintf("\tHex: %#x, %#X\n", 0xff, 0xff);
  kprintf("* I'm also pretty good with strings:\n");
  kprintf("\tHello, cruel %s!\n", "world");
  kprintf("In theory I can clearly understand all modifiers, length"
          " specificators and offsets, but I've not been tested well for amd64\n"
          "So, if you'll find any bug in my internals, please fix it\n");
  kprintf("\tWith Best Regards, %s\n%d.%.2d.%.2d\n",
          "your \"K.P.Rintf\"", 24, 8, 8);
  idle_loop();

}

void main_smpap_routine(void)
{
  for(;;) /* dummy */
    ;
}
